# Definitions from https://www.fujitsu.com/downloads/MICRO/fma/pdfmcu/CM71-00101-4E.pdf
#   FR Family
#   32 bit microcontroller
#   Instruction Manual

define endian=big;
define alignment=2;

define space ram type=ram_space size=4 default;
define space register type=register_space size=4;

# General purpose registers.
define register offset=0 size=4 [R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15];
# Missing the Program Status (PS) register here, it's modelled later.
define register offset=0x50 size=4 [PC TBR RP SSP USP];
# Special 8-byte multiplication/divsion register.
define register offset=0x100 size=8 [MD];
define register offset=0x100 size=4 [MDH];
define register offset=0x104 size=4 [MDL];

# Program Status register parts:
# 1. Status Bits
define register offset=0x150 size=1 [_ _ S I N Z V C];
# 2. Interrupt Level Mask
define register offset=0x200 size=1 [ILM];
# 3. System Condition Code
define register offset=0x250 size=1 [D1 D0 T_FLAG];


define token instr(16)
    type_a_Ri = (0, 3)
    type_a_Ri_s = (0, 3)
    type_a_Rj = (4, 7)
    type_a_Rj_s = (4, 7)
    type_a_OP = (8, 15)

    type_b_Ri = (0, 3)
    type_b_i8 = (4, 11)
    type_b_i8_signed = (4, 11) signed
    type_b_OP = (12, 15)

    type_c_Ri = (0, 3)
    type_c_i4 = (4, 7)
    type_c_i4_signed = (4, 7) signed
    type_c_i4_minusext = (4, 7)
    type_c_OP = (8, 15)

    type_d_u8 = (0, 7)
    type_d_u8_signed = (0, 7) signed
    type_d_OP = (8, 15)

    type_e_Ri = (0, 3)
    type_e_Rs = (0, 3)
    type_e_OP = (4, 15)

    type_f_rel11 = (0, 10) signed
    type_f_OP = (11, 15)

    opcode_00_15 = (0, 15)

# Nonsense for register lists.
    type_d_0 = (0, 0)
    type_d_1 = (1, 1)
    type_d_2 = (2, 2)
    type_d_3 = (3, 3)
    type_d_4 = (4, 4)
    type_d_5 = (5, 5)
    type_d_6 = (6, 6)
    type_d_7 = (7, 7)
    type_d_1_7 = (1, 7)
    type_d_2_7 = (2, 7)
    type_d_3_7 = (3, 7)
    type_d_4_7 = (4, 7)
    type_d_5_7 = (5, 7)
    type_d_6_7 = (6, 7)
    type_d_0_6 = (0, 6)
    type_d_0_5 = (0, 5)
    type_d_0_4 = (0, 4)
    type_d_0_3 = (0, 3)
    type_d_0_2 = (0, 2)
    type_d_0_1 = (0, 1)
;
define token data16 (16)
    imm16 = (0, 15)
;
define token data32 (32)
    imm32 = (0, 31)
;

# Data for coprocessor instructions.
define token coprocessor_data (16)
    C_CRi = (0, 3)
    C_Ri = (0, 3)
    C_CRj = (4, 7)
    C_Rj = (4, 7)
    C_CC = (7, 15)
;

attach variables [type_a_Ri type_a_Rj type_b_Ri type_c_Ri type_e_Ri C_Ri C_Rj] [
    R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15
];
attach variables [type_a_Ri_s type_a_Rj_s type_e_Rs] [
    TBR RP SSP USP MDH MDL _ _ _ _ _ _ _ _ _ _
];

# Minus extension token: portion lacking higher bits is complemented by adding 1s
attach values type_c_i4_minusext  [ -16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 ];

macro resultFlags(result) {
    Z = (result == 0);
	N = (result s< 0);
}

macro additionResultFlags(operand_1, operand_2, result) {
    resultFlags(result);

    V = scarry(operand_1, operand_2);
    C = carry(operand_1, operand_2);
}

macro subtractionResultFlags(operand_1, operand_2, result) {
    resultFlags(result);

    V = sborrow(operand_1, operand_2);
    C = operand_1 < operand_2;
}

:ADD type_a_Rj, type_a_Ri
is type_a_OP=0b10100110 & type_a_Rj & type_a_Ri
{
    local result = type_a_Ri + type_a_Rj;

    additionResultFlags(type_a_Ri, type_a_Rj, result);
    type_a_Ri = result;
}

:ADD #type_c_i4, type_c_Ri
is type_c_OP=0b10100100 & type_c_Ri & type_c_i4
{
    local extended_imm4:4 = type_c_i4;
    local result = type_c_Ri + extended_imm4;

    additionResultFlags(extended_imm4, type_c_Ri, result);
    type_c_Ri = result;
}

:ADD2 #type_c_i4_minusext, type_c_Ri
is type_c_OP=0b10100101 & type_c_Ri & type_c_i4_minusext
{
    local result = type_c_Ri + type_c_i4_minusext;

    additionResultFlags(type_c_Ri, type_c_i4_minusext, result);
    type_c_Ri = result;
}

:ADDC type_a_Rj, type_a_Ri
is type_a_OP=0b10100111 & type_a_Rj & type_a_Ri
{
    local registers_result = type_a_Ri + type_a_Rj;
    local c_tmp = zext(C);
    local result = registers_result + c_tmp;

    additionResultFlags(type_a_Ri, type_a_Rj, result);
    type_a_Ri = result;

    # Different handling of the carry flag here to account for three operands.
    C = carry(registers_result, c_tmp);
}

# ADDN opcodes do addition without affecting flags.

:ADDN type_a_Rj, type_a_Ri
is type_a_OP=0b10100010 & type_a_Rj & type_a_Ri
{
    type_a_Ri = type_a_Ri + type_a_Rj;
}

:ADDN #type_c_i4, type_c_Ri
is type_c_OP=0b10100000 & type_c_Ri & type_c_i4
{
    type_c_Ri = type_c_Ri + type_c_i4;
}

:ADDN2 #type_c_i4_minusext, type_c_Ri
is type_c_OP=0b10100001 & type_c_Ri & type_c_i4_minusext
{
    type_c_Ri = type_c_Ri + type_c_i4_minusext;
}

:SUB type_a_Rj, type_a_Ri
is type_a_OP=0b10101100 & type_a_Rj & type_a_Ri
{
    local result = type_a_Rj - type_a_Ri;

    subtractionResultFlags(type_a_Rj, type_a_Ri, result);
    type_a_Ri = result;
}

:SUBC type_a_Rj, type_a_Ri
is type_a_OP=0b10101101 & type_a_Rj & type_a_Ri
{
    local registers_result = type_a_Rj - type_a_Ri;
    local c_tmp = zext(C);
    local result = registers_result - c_tmp;

    subtractionResultFlags(type_a_Rj, type_a_Ri, result);

    # Different handling of the carry flag here to account for three operands.
    C = registers_result < c_tmp;
}

:SUBN type_a_Rj, type_a_Ri
is type_a_OP=0b10101110 & type_a_Rj & type_a_Ri
{
    type_a_Ri = type_a_Rj - type_a_Ri;
}

:CMP type_a_Rj, type_a_Ri
is type_a_OP=0b10101010 & type_a_Rj & type_a_Ri
{
    local result = type_a_Ri - type_a_Rj;
    subtractionResultFlags(type_a_Ri, type_a_Rj, result);
}

:CMP #type_c_i4, type_c_Ri
is type_c_OP=0b10101000 & type_c_Ri & type_c_i4
{
    local extended_imm4:4 = type_c_i4;
    local result = type_c_Ri - extended_imm4;

    subtractionResultFlags(type_c_Ri, extended_imm4, result);
}

:CMP2 #type_c_i4_minusext, type_c_Ri
is type_c_OP=0b10101001 & type_c_Ri & type_c_i4_minusext
{
    local result = type_c_Ri - type_c_i4_minusext;

    subtractionResultFlags(type_c_Ri, type_c_i4_minusext, result);
}

:AND type_a_Rj, type_a_Ri
is type_a_OP=0b10000010 & type_a_Rj & type_a_Ri
{
    local result = type_a_Rj & type_a_Ri;
    resultFlags(result);
    type_a_Ri = result;
}

:AND type_a_Rj, @type_a_Ri
is type_a_OP=0b10000100 & type_a_Rj & type_a_Ri
{
    local result = type_a_Rj & (*type_a_Ri);
    resultFlags(result);
    *type_a_Ri = result;
}

:ANDH type_a_Rj, @type_a_Ri
is type_a_OP=0b10000101 & type_a_Rj & type_a_Ri
{
    local result:2 = type_a_Rj:2 & (*:2 type_a_Ri);
    resultFlags(result);
    *:2 type_a_Ri = result;
}

:ANDB type_a_Rj, @type_a_Ri
is type_a_OP=0b10000110 & type_a_Rj & type_a_Ri
{
    local result:1 = type_a_Rj:1 & (*:1 type_a_Ri);
    resultFlags(result);
    *:1 type_a_Ri = result;
}

:OR type_a_Rj, type_a_Ri
is type_a_OP=0b10010010 & type_a_Rj & type_a_Ri
{
    local result = type_a_Rj | type_a_Ri;
    resultFlags(result);
    type_a_Ri = result;
}

:OR type_a_Rj, @type_a_Ri
is type_a_OP=0b10010100 & type_a_Rj & type_a_Ri
{
    local result = type_a_Rj | (*type_a_Ri);
    resultFlags(result);
    *type_a_Ri = result;
}

:ORH type_a_Rj, @type_a_Ri
is type_a_OP=0b10010101 & type_a_Rj & type_a_Ri
{
    local result:2 = type_a_Rj:2 | (*:2 type_a_Ri);
    resultFlags(result);
    *:2 type_a_Ri = result;
}

:ORB type_a_Rj, @type_a_Ri
is type_a_OP=0b10010110 & type_a_Rj & type_a_Ri
{
    local result:1 = type_a_Rj:1 | (*:1 type_a_Ri);
    resultFlags(result);
    *:1 type_a_Ri = result;
}

:EOR type_a_Rj, type_a_Ri
is type_a_OP=0b10011010 & type_a_Rj & type_a_Ri
{
    local result = type_a_Rj ^ type_a_Ri;
    resultFlags(result);
    type_a_Ri = result;
}

:EOR type_a_Rj, @type_a_Ri
is type_a_OP=0b10011100 & type_a_Rj & type_a_Ri
{
    local result = type_a_Rj ^ (*type_a_Ri);
    resultFlags(result);
    *type_a_Ri = result;
}

:EORH type_a_Rj, @type_a_Ri
is type_a_OP=0b10011101 & type_a_Rj & type_a_Ri
{
    local result:2 = type_a_Rj:2 ^ (*:2 type_a_Ri);
    resultFlags(result);
    *:2 type_a_Ri = result;
}

:EORB type_a_Rj, @type_a_Ri
is type_a_OP=0b10011110 & type_a_Rj & type_a_Ri
{
    local result:1 = type_a_Rj:1 ^ (*:1 type_a_Ri);
    resultFlags(result);
    *:1 type_a_Ri = result;
}

:BANDL #type_c_i4, @type_c_Ri
is type_c_OP=0b10000000 & type_c_Ri & type_c_i4
{
    local memory_value:1 = *:1 type_c_Ri;
    local result = (memory_value & 0x0F) & type_c_i4;
    *:1 type_c_Ri = (memory_value & 0xF0) | (result & 0x0F);
}

:BANDH #type_c_i4, @type_c_Ri
is type_c_OP=0b10000001 & type_c_Ri & type_c_i4
{
    local memory_value:1 = *:1 type_c_Ri;
    local result = (memory_value & 0xF0) & (type_c_i4 << 4);
    *:1 type_c_Ri = (result & 0xF0) | (memory_value & 0x0F);
}

:BORL #type_c_i4, @type_c_Ri
is type_c_OP=0b10010000 & type_c_Ri & type_c_i4
{
    local memory_value:1 = *:1 type_c_Ri;
    *:1 type_c_Ri = memory_value | type_c_i4;
}

:BORH #type_c_i4, @type_c_Ri
is type_c_OP=0b10010001 & type_c_Ri & type_c_i4
{
    local memory_value:1 = *:1 type_c_Ri;
    *:1 type_c_Ri = memory_value | (type_c_i4 << 4);
}

:BEORL #type_c_i4, @type_c_Ri
is type_c_OP=0b10011000 & type_c_Ri & type_c_i4
{
    local memory_value:1 = *:1 type_c_Ri;
    local result = (memory_value & 0x0F) ^ type_c_i4;
    *:1 type_c_Ri = (memory_value & 0xF0) | (result & 0x0F);
}

:BEORH #type_c_i4, @type_c_Ri
is type_c_OP=0b10011001 & type_c_Ri & type_c_i4
{
    local memory_value:1 = *:1 type_c_Ri;
    local result = (memory_value & 0xF0) ^ (type_c_i4 << 4);
    *:1 type_c_Ri = (result & 0xF0) | (memory_value & 0x0F);
}

:BTSTL #type_c_i4, @type_c_Ri
is type_c_OP=0b10001000 & type_c_Ri & type_c_i4
{
    local memory_value:1 = *:1 type_c_Ri;
    local result = (memory_value & 0x0F) & type_c_i4;

    N = 0;
    Z = (result == 0);
}

:BTSTH #type_c_i4, @type_c_Ri
is type_c_OP=0b10001001 & type_c_Ri & type_c_i4
{
    local memory_value:1 = *:1 type_c_Ri;
    local result = (memory_value & 0xF0) & (type_c_i4 << 4);

    N = 0;
    Z = (result == 0);
}

macro multiplicationResultFlags(result) {
    N = (MDL s< 0);
    V = (result & 0xFFFFFFFF) == result;
    Z = (result == 0);
}


:MUL type_a_Rj, type_a_Ri
is type_a_OP=0b10101111 & type_a_Rj & type_a_Ri
{
    local result:8 = sext(type_a_Rj) * sext(type_a_Ri);
    MD = result;
    multiplicationResultFlags(result);
}

:MULU type_a_Rj, type_a_Ri
is type_a_OP=0b10101011 & type_a_Rj & type_a_Ri
{
    local result:8 = zext(type_a_Rj) * zext(type_a_Ri);
    MD = result;
    multiplicationResultFlags(result);
}

:MULH type_a_Rj, type_a_Ri
is type_a_OP=0b10111111 & type_a_Rj & type_a_Ri
{
    local result:8 = sext(type_a_Rj:2) * sext(type_a_Ri:2);
    MD = result;
    multiplicationResultFlags(result);
}

:MULUH type_a_Rj, type_a_Ri
is type_a_OP=0b10111011 & type_a_Rj & type_a_Ri
{
    local result:8 = zext(type_a_Rj:2) * zext(type_a_Ri:2);
    MD = result;
    multiplicationResultFlags(result);
}

:DIV0S type_e_Ri
is type_e_OP=0b100101110100 & type_e_Ri
{
    D0 = (MDL s< 0);
    D1 = (MDL s< 0) ^ (type_e_Ri s< 0);

    MD = sext(MDL);
}

:DIV0U type_e_Ri
is type_e_OP=0b100101110101 & type_e_Ri
{
    D0 = 0;
    D1 = 0;
    MDH = 0;
}

:DIV1 type_e_Ri
is type_e_OP=0b100101110110 & type_e_Ri
{
    MD = MD << 1;
    # Performs MDH + R_i if D1 == 1, otherwise MDH - R_i
    if (D1 == 1) goto <positive>;

    tmp = MDH - type_e_Ri;
    C = MDH < type_e_Ri;

    goto <after_step>;
<positive>
    tmp = MDH + type_e_Ri;
    C = MDH < type_e_Ri;

<after_step>
    Z = (tmp == 0);

    if ((D0 ^ D1 ^ C) != 0) goto <end>;
    MDH = tmp;
    MDL[0,1] = 1;
<end>
}

:DIV2 type_e_Ri
is type_e_OP=0b100101110111 & type_e_Ri
{
    # Performs MDH + R_i if D1 == 1, otherwise MDH - R_i
    if (D1 == 1) goto <positive>;

    C = MDH < type_e_Ri;

    goto <after_step>;
<positive>
    C = MDH < type_e_Ri;

<after_step>
    if (Z != 1) goto <end>;
    MDH = 0;
<end>
}

:DIV3
is opcode_00_15=0b1001111101100000
{
    if (Z != 1) goto <end>;
    MDL = MDL + 1;
<end>
}

:DIV4S
is opcode_00_15=0b1001111101110000
{
    if (Z != 1) goto <end>;
    MDL = 0 - MDL;
<end>
}

:LSL type_a_Rj, type_a_Ri
is type_a_OP=0b10110110 & type_a_Rj & type_a_Ri
{
    local result = type_a_Ri << type_a_Rj;
    type_a_Ri = result;

    resultFlags(result);
}

:LSL #type_c_i4, type_c_Ri
is type_c_OP=0b10110100 & type_c_Ri & type_c_i4
{
    local result = type_c_Ri << type_c_i4;
    type_c_Ri = result;

    resultFlags(result);
}

:LSL2 #type_c_i4, type_c_Ri
is type_c_OP=0b10110101 & type_c_Ri & type_c_i4
{
    local result = type_c_Ri << (type_c_i4 + 16);
    type_c_Ri = result;

    resultFlags(result);
}

:LSR type_a_Rj, type_a_Ri
is type_a_OP=0b10110010 & type_a_Rj & type_a_Ri
{
    local result = type_a_Ri >> type_a_Rj;
    type_a_Ri = result;

    resultFlags(result);
}

:LSR #type_c_i4, type_c_Ri
is type_c_OP=0b10110000 & type_c_Ri & type_c_i4
{
    local result = type_c_Ri >> type_c_i4;
    type_c_Ri = result;

    resultFlags(result);
}

:LSR2 #type_c_i4, type_c_Ri
is type_c_OP=0b10110001 & type_c_Ri & type_c_i4
{
    local result = type_c_Ri >> (type_c_i4 + 16);
    type_c_Ri = result;

    resultFlags(result);
}

:ASR type_a_Rj, type_a_Ri
is type_a_OP=0b10111010 & type_a_Rj & type_a_Ri
{
    local result = type_a_Ri s>> type_a_Rj;
    type_a_Ri = result;

    resultFlags(result);
}

:ASR #type_c_i4, type_c_Ri
is type_c_OP=0b10111000 & type_c_Ri & type_c_i4
{
    local result = type_c_Ri s>> type_c_i4;
    type_c_Ri = result;

    resultFlags(result);
}

:ASR2 #type_c_i4, type_c_Ri
is type_c_OP=0b10111001 & type_c_Ri & type_c_i4
{
    local result = type_c_Ri s>> (type_c_i4 + 16);
    type_c_Ri = result;

    resultFlags(result);
}

:LDI":"32 #imm32, type_e_Ri
is type_e_OP=0b100111111000 & type_e_Ri; imm32
{
    type_e_Ri = imm32;
}

:LDI":"20 #imm20, type_c_Ri
is type_c_OP=0b10011011 & type_c_Ri & type_c_i4; imm16[ imm20 = (type_c_i4 << 16) | imm16; ]
{
    type_c_Ri = imm20;
}

:LDI":"8 #type_b_i8, type_b_Ri
is type_b_OP=0b1100 & type_b_i8 & type_b_Ri
{
    type_b_Ri = type_b_i8;
}

:LD @type_a_Rj, type_a_Ri
is type_a_OP=0b00000100 & type_a_Rj & type_a_Ri
{
    type_a_Ri = *type_a_Rj;
}

:LD @("R13" + type_a_Rj), type_a_Ri
is type_a_OP=0b00000000 & type_a_Rj & type_a_Ri
{
    type_a_Ri = *(type_a_Rj + R13);
}

:LD @("R14" + 4 * type_b_i8_signed), type_b_Ri
is type_b_OP=0b0010 & type_b_i8_signed & type_b_Ri
{
    type_b_Ri = *(R14 + (4 * type_b_i8_signed));
}

:LD @("R15" + 4 * type_c_i4), type_c_Ri
is type_c_OP=0b00000011 & type_c_Ri & type_c_i4
{
    type_c_Ri = *(R15 + (4 * type_c_i4));
}

:LD @"R15+", type_e_Ri
is type_e_OP=0b000001110000 & type_e_Ri
{
    type_e_Ri = *R15;
    R15 = R15 + 4;
}

:LD @"R15+", type_e_Rs
is type_e_OP=0b000001111000 & type_e_Rs
{
    type_e_Rs = *R15;
    R15 = R15 + 4;
}

:LD "@R15+", "PS"
is opcode_00_15=0b0000011110010000
{
    local new_PS:4 = *R15;

    C = new_PS[0,1];
    V = new_PS[1,1];
    Z = new_PS[2,1];
    N = new_PS[3,1];
    I = new_PS[4,1];
    S = new_PS[5,1];

    T_FLAG = new_PS[8,1];
    D0 = new_PS[9,1];
    D1 = new_PS[10,1];

    ILM = new_PS[16,4];

    R15 = R15 + 4;
}

:LDUH @type_a_Rj, type_a_Ri
is type_a_OP=0b00000101 & type_a_Rj & type_a_Ri
{
    type_a_Ri = zext(*:2 type_a_Rj);
}

:LDUH @("R13" + type_a_Rj), type_a_Ri
is type_a_OP=0b00000001 & type_a_Rj & type_a_Ri
{
    type_a_Ri = zext(*:2 (type_a_Rj + R13));
}

:LDUH @("R14" + 2 * type_b_i8_signed), type_b_Ri
is type_b_OP=0b0100 & type_b_i8_signed & type_b_Ri
{
    type_b_Ri = zext(*:2 (R14 + (2 * type_b_i8_signed)));
}

:LDUB @type_a_Rj, type_a_Ri
is type_a_OP=0b00000110 & type_a_Rj & type_a_Ri
{
    type_a_Ri = zext(*:1 type_a_Rj);
}

:LDUB @("R13" + type_a_Rj), type_a_Ri
is type_a_OP=0b00000010 & type_a_Rj & type_a_Ri
{
    type_a_Ri = zext(*:1 (type_a_Rj + R13));
}

:LDUB @("R14" + type_b_i8_signed), type_b_Ri
is type_b_OP=0b0110 & type_b_i8_signed & type_b_Ri
{
    type_b_Ri = zext(*:1 (R14 + type_b_i8_signed));
}

:ST type_a_Ri, @type_a_Rj
is type_a_OP=0b00010100 & type_a_Rj & type_a_Ri
{
    *type_a_Rj = type_a_Ri;
}

:ST type_a_Ri, @("R13" + type_a_Rj)
is type_a_OP=0b00010000 & type_a_Rj & type_a_Ri
{
    *(R13 + type_a_Rj) = type_a_Ri;
}

:ST type_b_Ri, @("R14" + 4 * type_b_i8_signed)
is type_b_OP=0b0011 & type_b_i8_signed & type_b_Ri
{
    *(R14 + (4 * type_b_i8_signed)) = type_b_Ri;
}

:ST type_c_Ri, @("R15" + 4 * type_c_i4)
is type_c_OP=0b00010011 & type_c_Ri & type_c_i4
{
    *(R15 + (4 * type_c_i4)) = type_c_Ri;
}

:ST type_e_Ri, @"-R15"
is type_e_OP=0b000101110000 & type_e_Ri
{
    R15 = R15 - 4;
    *R15 = type_e_Ri;
}

:ST type_e_Rs, @"-R15"
is type_e_OP=0b000101111000 & type_e_Rs
{
    R15 = R15 - 4;
    *R15 = type_e_Rs;
}

:ST "PS", "@-R15"
is opcode_00_15=0b0001011110010000
{
    local PS:4 = 0;

    PS[0,1] = C;
    PS[1,1] = V;
    PS[2,1] = Z;
    PS[3,1] = N;
    PS[4,1] = I;
    PS[5,1] = S;

    PS[8,1] = T_FLAG;
    PS[9,1] = D0;
    PS[10,1] = D1;

    PS[16,4] = ILM;

    R15 = R15 - 4;
    *R15 = PS;
}

:STH type_a_Ri, @type_a_Rj
is type_a_OP=0b00010101 & type_a_Rj & type_a_Ri
{
    * type_a_Rj = type_a_Ri:2;
}

:STH type_a_Ri, @("R13" + type_a_Rj)
is type_a_OP=0b00010001 & type_a_Rj & type_a_Ri
{
    * (R13 + type_a_Rj) = type_a_Ri:2;
}

:STH type_b_Ri, @("R14" + 2 * type_b_i8_signed)
is type_b_OP=0b0101 & type_b_i8_signed & type_b_Ri
{
    * (R14 + (2 * type_b_i8_signed)) = type_b_Ri:2;
}

:STB type_a_Ri, @type_a_Rj
is type_a_OP=0b00010110 & type_a_Rj & type_a_Ri
{
    * type_a_Rj = type_a_Ri:1;
}

:STB type_a_Ri, @("R13" + type_a_Rj)
is type_a_OP=0b00010010 & type_a_Rj & type_a_Ri
{
    * (R13 + type_a_Rj) = type_a_Ri:1;
}

:STB type_b_Ri, @("R14" + type_b_i8_signed)
is type_b_OP=0b0111 & type_b_i8_signed & type_b_Ri
{
    * (R14 + type_b_i8_signed) = type_b_Ri:1;
}

:MOV type_a_Rj, type_a_Ri
is type_a_OP=0b10001011 & type_a_Rj & type_a_Ri
{
    type_a_Ri = type_a_Rj;
}

:MOV type_a_Rj_s, type_a_Ri
is type_a_OP=0b10110111 & type_a_Rj_s & type_a_Ri
{
    type_a_Ri = type_a_Rj_s;
}

:MOV "PS", type_e_Ri
is type_e_OP=0b000101110001 & type_e_Ri
{
    local PS:4 = 0;

    PS[0,1] = C;
    PS[1,1] = V;
    PS[2,1] = Z;
    PS[3,1] = N;
    PS[4,1] = I;
    PS[5,1] = S;

    PS[8,1] = T_FLAG;
    PS[9,1] = D0;
    PS[10,1] = D1;

    PS[16,4] = ILM;

    type_e_Ri = PS;
}

:MOV type_a_Ri, type_a_Rj_s
is type_a_OP=0b10110011 & type_a_Rj_s & type_a_Ri
{
    type_a_Rj_s = type_a_Ri;
}

:MOV type_e_Ri, "PS"
is type_e_OP=0b000001110001 & type_e_Ri
{
    local new_PS:4 = type_e_Ri;

    C = new_PS[0,1];
    V = new_PS[1,1];
    Z = new_PS[2,1];
    N = new_PS[3,1];
    I = new_PS[4,1];
    S = new_PS[5,1];

    T_FLAG = new_PS[8,1];
    D0 = new_PS[9,1];
    D1 = new_PS[10,1];

    ILM = new_PS[16,4];
}

:JMP @type_e_Ri
is type_e_OP=0b100101110000 & type_e_Ri
{
    goto [type_e_Ri];
}

dest: rel is type_f_rel11 [ rel = inst_next + type_f_rel11*2; ]
{
    export *:4 rel;
}

:CALL dest
is type_f_OP=0b11010 & dest
{
    RP = inst_next;
    call dest;
}

:CALL @type_e_Ri
is type_e_OP=0b100101110001 & type_e_Ri
{
    RP = inst_next;
    call [type_e_Ri];
}

:RET
is opcode_00_15=0b1001011100100000
{
    return [RP];
}

interruptTableLookup: handler
is type_d_u8 [ handler = TBR + 0x3FC - (type_d_u8 * 4); ]
{
    export *:4 handler;
}

:INT #type_d_u8
is type_d_OP=0b00011111 & type_d_u8 & interruptTableLookup
{
    SSP = SSP - 4;
    # Doesn't push PS register for now.
    SSP = SSP - 4;
    *:4 SSP = inst_next;

    I = 0;
    S = 0;

    call interruptTableLookup;
}

:INTE
is opcode_00_15=0b1001111100110000
{
    SSP = SSP - 4;
    # Doesn't push PS register for now.
    SSP = SSP - 4;
    *:4 SSP = inst_next;

    ILM = 0x4;
    S = 0;

    local handler:4 = TBR + 0x3D8;
    call [handler];
}

:RETI
is opcode_00_15=0b1001011100110000
{
    PC = *:4 R15;
    R15 = R15 + 4;
    # Doesn't pop the PS registr for now.
    R15 = R15 + 4;
    return [PC];
}

branchDest: rel is type_d_u8_signed [ rel = inst_next + type_d_u8_signed*2; ]
{
    export *:4 rel;
}

:BRA branchDest
is branchDest & type_d_OP=0b11100000 {
    goto branchDest;
}

:BNO branchDest
is branchDest & type_d_OP=0b11100001 {
    # no-op, this branch is never satisfied.
}

:BEQ branchDest
is branchDest & type_d_OP=0b11100010 {
    if (Z) goto branchDest;
}

:BNE branchDest
is branchDest & type_d_OP=0b11100011 {
    if (!Z) goto branchDest;
}

:BC branchDest
is branchDest & type_d_OP=0b11100100 {
    if (C) goto branchDest;
}

:BNC branchDest
is branchDest & type_d_OP=0b11100101 {
    if (!C) goto branchDest;
}

:BN branchDest
is branchDest & type_d_OP=0b11100110 {
    if (N) goto branchDest;
}

:BP branchDest
is branchDest & type_d_OP=0b11100111 {
    if (!N) goto branchDest;
}

:BV branchDest
is branchDest & type_d_OP=0b11101000 {
    if (V) goto branchDest;
}

:BNV branchDest
is branchDest & type_d_OP=0b11101001 {
    if (!V) goto branchDest;
}

:BLT branchDest
is branchDest & type_d_OP=0b11101010 {
    if (V != N) goto branchDest;
}

:BGE branchDest
is branchDest & type_d_OP=0b11101011 {
    if (V == N) goto branchDest;
}

:BLE branchDest
is branchDest & type_d_OP=0b11101100 {
    if (Z || (V != N)) goto branchDest;
}

:BGT branchDest
is branchDest & type_d_OP=0b11101101 {
    if (!Z && (V == N)) goto branchDest;
}

:BLS branchDest
is branchDest & type_d_OP=0b11101110 {
    if (C || Z) goto branchDest;
}

:BHI branchDest
is branchDest & type_d_OP=0b11101111 {
    if !(C || Z) goto branchDest;
}

# Delay slotted branch instructions

:JMP":D" @type_e_Ri
is type_e_OP=0b100111110000 & type_e_Ri
{
    delayslot(1);
    goto [type_e_Ri];
}

:CALL":D" dest
is type_f_OP=0b11011 & dest
{
    RP = inst_next;
    delayslot(1);
    call dest;
}

:CALL":D" @type_e_Ri
is type_e_OP=0b100111110001 & type_e_Ri
{
    RP = inst_next;
    delayslot(1);
    call [type_e_Ri];
}

:RET":D"
is opcode_00_15=0b1001111100100000
{
    delayslot(1);
    return [RP];
}

:BRA":D" branchDest
is branchDest & type_d_OP=0b11110000 {
    delayslot(1);
    goto branchDest;
}

:BNO":D" branchDest
is branchDest & type_d_OP=0b11110001 {
    delayslot(1);
}

:BEQ":D" branchDest
is branchDest & type_d_OP=0b11110010 {
    local cond:1 = Z;
    delayslot(1);
    if (cond) goto branchDest;
}

:BNE":D" branchDest
is branchDest & type_d_OP=0b11110011 {
    local cond:1 = !Z;
    delayslot(1);
    if (cond) goto branchDest;
}

:BC":D" branchDest
is branchDest & type_d_OP=0b11110100 {
    local cond:1 = C;
    delayslot(1);
    if (cond) goto branchDest;
}

:BNC":D" branchDest
is branchDest & type_d_OP=0b11110101 {
    local cond:1 = !C;
    delayslot(1);
    if (cond) goto branchDest;
}

:BN":D" branchDest
is branchDest & type_d_OP=0b11110110 {
    local cond:1 = N;
    delayslot(1);
    if (cond) goto branchDest;
}

:BP":D" branchDest
is branchDest & type_d_OP=0b11110111 {
    local cond:1 = !N;
    delayslot(1);
    if (cond) goto branchDest;
}

:BV":D" branchDest
is branchDest & type_d_OP=0b11111000 {
    local cond:1 = V;
    delayslot(1);
    if (cond) goto branchDest;
}

:BNV":D" branchDest
is branchDest & type_d_OP=0b11111001 {
    local cond:1 = !V;
    delayslot(1);
    if (cond) goto branchDest;
}

:BLT":D" branchDest
is branchDest & type_d_OP=0b11111010 {
    local cond:1 = (V != N);
    delayslot(1);
    if (cond) goto branchDest;
}

:BGE":D" branchDest
is branchDest & type_d_OP=0b11111011 {
    local cond:1 = (V == N);
    delayslot(1);
    if (cond) goto branchDest;
}

:BLE":D" branchDest
is branchDest & type_d_OP=0b11111100 {
    local cond:1 = (Z || (V != N));
    delayslot(1);
    if (cond) goto branchDest;
}

:BGT":D" branchDest
is branchDest & type_d_OP=0b11111101 {
    local cond:1 = (!Z && (V == N));
    delayslot(1);
    if (cond) goto branchDest;
}

:BLS":D" branchDest
is branchDest & type_d_OP=0b11111110 {
    local cond:1 = (C || Z);
    delayslot(1);
    if (cond) goto branchDest;
}

:BHI":D" branchDest
is branchDest & type_d_OP=0b11111111 {
    local cond:1 = !(C || Z);
    delayslot(1);
    if (cond) goto branchDest;
}

:DMOV @dir8, "R13"
is type_d_u8 & type_d_OP=0b00001000 [ dir8 = type_d_u8 * 4; ]
{
    R13 = * dir8:4;
}

:DMOV "R13", @dir8
is type_d_u8 & type_d_OP=0b00011000 [ dir8 = type_d_u8 * 4; ]
{
    * dir8:4 = R13;
}

:DMOV @dir8, "@R13+"
is type_d_u8 & type_d_OP=0b00001100 [ dir8 = type_d_u8 * 4; ]
{
    *:4 R13 = * dir8:4;
    R13 = R13 + 4;
}

:DMOV "@R13+", @dir8
is type_d_u8 & type_d_OP=0b00011100 [ dir8 = type_d_u8 * 4; ]
{
    * dir8:4 = *:4 R13;
    R13 = R13 + 4;
}

:DMOV @dir8, "@-R15"
is type_d_u8 & type_d_OP=0b00001011 [ dir8 = type_d_u8 * 4; ]
{
    R15 = R15 - 4;
    *:4 R15 = * dir8:4;
}

:DMOV "@R15+", @dir8
is type_d_u8 & type_d_OP=0b00011011 [ dir8 = type_d_u8 * 4; ]
{
    * dir8:4 = *:4 R15;
    R15 = R15 + 4;
}

:DMOVH @dir8, "R13"
is type_d_u8 & type_d_OP=0b00001001 [ dir8 = type_d_u8 * 2; ]
{
    R13 = zext(*:2 dir8:4);
}

:DMOVH "R13", @dir8
is type_d_u8 & type_d_OP=0b00011001 [ dir8 = type_d_u8 * 2; ]
{
    * dir8:4 = R13:2;
}

:DMOVH @dir8, "@R13+"
is type_d_u8 & type_d_OP=0b00001101 [ dir8 = type_d_u8 * 2; ]
{
    *:2 R13 = *:2 dir8:4;
    R13 = R13 + 2;
}

:DMOVH "@R13+", @dir8
is type_d_u8 & type_d_OP=0b00011101 [ dir8 = type_d_u8 * 2; ]
{
    *:2 dir8:4 = *:2 R13;
    R13 = R13 + 2;
}

:DMOVB @type_d_u8, "R13"
is type_d_u8 & type_d_OP=0b00001010
{
    R13 = zext(*:1 type_d_u8:4);
}

:DMOVB "R13", @type_d_u8
is type_d_u8 & type_d_OP=0b00011010
{
    * type_d_u8:4 = R13:1;
}

:DMOVB @type_d_u8, "@R13+"
is type_d_u8 & type_d_OP=0b00001110
{
    *:1 R13 = *:1 type_d_u8:4;
    R13 = R13 + 1;
}

:DMOVB "@R13+", @type_d_u8
is type_d_u8 & type_d_OP=0b00011110
{
    *:1 type_d_u8:4 = *:1 R13;
    R13 = R13 + 1;
}

# Coprocessor opcodes, all NO-OPS for now.
:LDRES @type_c_Ri+, #type_c_i4
is type_c_OP=0b10111100 & type_c_Ri & type_c_i4
{
    # We don't actually load the resource.
    type_c_Ri = type_c_Ri + 4;
}

:STRES #type_c_i4, @type_c_Ri+
is type_c_OP=0b10111101 & type_c_Ri & type_c_i4
{
    # We don't actually load the resource.
    type_c_Ri = type_c_Ri + 4;
}

:COPOP #type_e_Ri, #C_CC, C_CRj, C_CRi
is type_e_OP=0b100111111100 & type_e_Ri; C_CC & C_CRj & C_CRi
{
}

:COPLD #type_e_Ri, #C_CC, C_Rj, C_CRi
is type_e_OP=0b100111111101 & type_e_Ri; C_CC & C_Rj & C_CRi
{
}

:COPST #type_e_Ri, #C_CC, C_CRj, C_Ri
is type_e_OP=0b100111111110 & type_e_Ri; C_CC & C_CRj & C_Ri
{
}

:COPSV #type_e_Ri, #C_CC, C_CRj, C_Ri
is type_e_OP=0b100111111111 & type_e_Ri; C_CC & C_CRj & C_Ri
{
}

:ANDCCR #type_d_u8
is type_d_OP=0b10000011 & type_d_u8
{
    local new_ccr:1 = type_d_u8;
    C = C && new_ccr[0,1];
    V = V && new_ccr[1,1];
    Z = Z && new_ccr[2,1];
    N = N && new_ccr[3,1];
    I = I && new_ccr[4,1];
    S = S && new_ccr[5,1];
}

:ORCCR #type_d_u8
is type_d_OP=0b10010011 & type_d_u8
{
    local new_ccr:1 = type_d_u8;
    C = C || new_ccr[0,1];
    V = V || new_ccr[1,1];
    Z = Z || new_ccr[2,1];
    N = N || new_ccr[3,1];
    I = I || new_ccr[4,1];
    S = S || new_ccr[5,1];
}

:STILM #type_d_u8
is type_d_OP=0b10000111 & type_d_u8
{
    ILM = type_d_u8;
}

:ADDSP #type_d_u8_signed
is type_d_OP=0b10100011 & type_d_u8_signed
{
    R15 = R15 + (4 * type_d_u8_signed);
}

:EXTSB type_e_Ri
is type_e_OP=0b100101111000 & type_e_Ri
{
    type_e_Ri = sext(type_e_Ri & 0xFF);
}

:EXTUB type_e_Ri
is type_e_OP=0b100101111001 & type_e_Ri
{
    type_e_Ri = type_e_Ri & 0xFF;
}

:EXTSH type_e_Ri
is type_e_OP=0b100101111010 & type_e_Ri
{
    type_e_Ri = sext(type_e_Ri & 0xFFFF);
}

:EXTUH type_e_Ri
is type_e_OP=0b100101111011 & type_e_Ri
{
    type_e_Ri = type_e_Ri & 0xFFFF;
}

:NOP
is opcode_00_15=0b1001111110100000
{
}

# Register list arguments.
LDM0_7:                      is type_d_7=0                     { }
LDM0_7: R7                   is type_d_7=1 & R7                { R7 = *:4 R15; R15 = R15 + 4; }
LDM0_6: LDM0_7               is type_d_6=0 & LDM0_7            { }
LDM0_6: R6, LDM0_7           is type_d_6=1 & R6 & LDM0_7       { R6 = *:4 R15; R15 = R15 + 4; build LDM0_7; }
LDM0_6: R6                   is type_d_6=1 & type_d_7=0 & R6   { R6 = *:4 R15; R15 = R15 + 4; }
LDM0_5: LDM0_6               is type_d_5=0 & LDM0_6            { }
LDM0_5: R5, LDM0_6           is type_d_5=1 & R5 & LDM0_6       { R5 = *:4 R15; R15 = R15 + 4; build LDM0_6; }
LDM0_5: R5                   is type_d_5=1 & type_d_6_7=0 & R5 { R5 = *:4 R15; R15 = R15 + 4; }
LDM0_4: LDM0_5               is type_d_4=0 & LDM0_5            { }
LDM0_4: R4, LDM0_5           is type_d_4=1 & R4 & LDM0_5       { R4 = *:4 R15; R15 = R15 + 4; build LDM0_5; }
LDM0_4: R4                   is type_d_4=1 & type_d_5_7=0 & R4 { R4 = *:4 R15; R15 = R15 + 4; }
LDM0_3: LDM0_4               is type_d_3=0 & LDM0_4            { }
LDM0_3: R3, LDM0_4           is type_d_3=1 & R3 & LDM0_4       { R3 = *:4 R15; R15 = R15 + 4; build LDM0_4; }
LDM0_3: R3                   is type_d_3=1 & type_d_4_7=0 & R3 { R3 = *:4 R15; R15 = R15 + 4; }
LDM0_2: LDM0_3               is type_d_2=0 & LDM0_3            { }
LDM0_2: R2, LDM0_3           is type_d_2=1 & R2 & LDM0_3       { R2 = *:4 R15; R15 = R15 + 4; build LDM0_3; }
LDM0_2: R2                   is type_d_2=1 & type_d_3_7=0 & R2 { R2 = *:4 R15; R15 = R15 + 4; }
LDM0_1: LDM0_2               is type_d_1=0 & LDM0_2            { }
LDM0_1: R1, LDM0_2           is type_d_1=1 & R1 & LDM0_2       { R1 = *:4 R15; R15 = R15 + 4; build LDM0_2; }
LDM0_1: R1                   is type_d_1=1 & type_d_2_7=0 & R1 { R1 = *:4 R15; R15 = R15 + 4; }
LDM0_0: LDM0_1               is type_d_0=0 & LDM0_1            { }
LDM0_0: R0, LDM0_1           is type_d_0=1 & R0 & LDM0_1       { R0 = *:4 R15; R15 = R15 + 4; build LDM0_1; }
LDM0_0: R0                   is type_d_0=1 & type_d_1_7=0 & R0 { R0 = *:4 R15; R15 = R15 + 4; }
LDM0_list_inc: "("LDM0_0")"  is LDM0_0                         { }

:LDM0 LDM0_list_inc
is type_d_OP=0b10001100 & LDM0_list_inc
{
    build LDM0_list_inc;
}

LDM1_7:                       is type_d_7=0                      { }
LDM1_7: R15                   is type_d_7=1 & R15                { R15 = *:4 R15; R15 = R15 + 4; }
LDM1_6: LDM1_7                is type_d_6=0 & LDM1_7             { }
LDM1_6: R14, LDM1_7           is type_d_6=1 & R14 & LDM1_7       { R14 = *:4 R15; R15 = R15 + 4; build LDM1_7; }
LDM1_6: R14                   is type_d_6=1 & type_d_7=0 & R14   { R14 = *:4 R15; R15 = R15 + 4; }
LDM1_5: LDM1_6                is type_d_5=0 & LDM1_6             { }
LDM1_5: R13, LDM1_6           is type_d_5=1 & R13 & LDM1_6       { R13 = *:4 R15; R15 = R15 + 4; build LDM1_6; }
LDM1_5: R13                   is type_d_5=1 & type_d_6_7=0 & R13 { R13 = *:4 R15; R15 = R15 + 4; }
LDM1_4: LDM1_5                is type_d_4=0 & LDM1_5             { }
LDM1_4: R12, LDM1_5           is type_d_4=1 & R12 & LDM1_5       { R12 = *:4 R15; R15 = R15 + 4; build LDM1_5; }
LDM1_4: R12                   is type_d_4=1 & type_d_5_7=0 & R12 { R12 = *:4 R15; R15 = R15 + 4; }
LDM1_3: LDM1_4                is type_d_3=0 & LDM1_4             { }
LDM1_3: R11, LDM1_4           is type_d_3=1 & R11 & LDM1_4       { R11 = *:4 R15; R15 = R15 + 4; build LDM1_4; }
LDM1_3: R11                   is type_d_3=1 & type_d_4_7=0 & R11 { R11 = *:4 R15; R15 = R15 + 4; }
LDM1_2: LDM1_3                is type_d_2=0 & LDM1_3             { }
LDM1_2: R10, LDM1_3           is type_d_2=1 & R10 & LDM1_3       { R10 = *:4 R15; R15 = R15 + 4; build LDM1_3; }
LDM1_2: R10                   is type_d_2=1 & type_d_3_7=0 & R10 { R10 = *:4 R15; R15 = R15 + 4; }
LDM1_1: LDM1_2                is type_d_1=0 & LDM1_2             { }
LDM1_1: R9, LDM1_2            is type_d_1=1 & R9 & LDM1_2        { R9 = *:4 R15; R15 = R15 + 4; build LDM1_2; }
LDM1_1: R9                    is type_d_1=1 & type_d_2_7=0 & R9  { R9 = *:4 R15; R15 = R15 + 4; }
LDM1_0: LDM1_1                is type_d_0=0 & LDM1_1             { }
LDM1_0: R8, LDM1_1            is type_d_0=1 & R8 & LDM1_1        { R8 = *:4 R15; R15 = R15 + 4; build LDM1_1; }
LDM1_0: R8                    is type_d_0=1 & type_d_1_7=0 & R8  { R8 = *:4 R15; R15 = R15 + 4; }
LDM1_list_inc: "("LDM1_0")"   is LDM1_0                          { }

:LDM1 LDM1_list_inc
is type_d_OP=0b10001101 & LDM1_list_inc
{
    build LDM1_list_inc;
}

# Register list arguments.
STM0_7:                      is type_d_0=0                     { }
STM0_7: R7                   is type_d_0=1 & R7                { R15 = R15 - 4; *:4 R15 = R7; }
STM0_6: STM0_7               is type_d_1=0 & STM0_7            { }
STM0_6: R6, STM0_7           is type_d_1=1 & R6 & STM0_7       { R15 = R15 - 4; *:4 R15 = R6; }
STM0_6: R6                   is type_d_1=1 & type_d_0=0 & R6   { R15 = R15 - 4; *:4 R15 = R6; }
STM0_5: STM0_6               is type_d_2=0 & STM0_6            { }
STM0_5: R5, STM0_6           is type_d_2=1 & R5 & STM0_6       { R15 = R15 - 4; *:4 R15 = R5; }
STM0_5: R5                   is type_d_2=1 & type_d_0_1=0 & R5 { R15 = R15 - 4; *:4 R15 = R5; }
STM0_4: STM0_5               is type_d_3=0 & STM0_5            { }
STM0_4: R4, STM0_5           is type_d_3=1 & R4 & STM0_5       { R15 = R15 - 4; *:4 R15 = R4; }
STM0_4: R4                   is type_d_3=1 & type_d_0_2=0 & R4 { R15 = R15 - 4; *:4 R15 = R4; }
STM0_3: STM0_4               is type_d_4=0 & STM0_4            { }
STM0_3: R3, STM0_4           is type_d_4=1 & R3 & STM0_4       { R15 = R15 - 4; *:4 R15 = R3; }
STM0_3: R3                   is type_d_4=1 & type_d_0_3=0 & R3 { R15 = R15 - 4; *:4 R15 = R3; }
STM0_2: STM0_3               is type_d_5=0 & STM0_3            { }
STM0_2: R2, STM0_3           is type_d_5=1 & R2 & STM0_3       { R15 = R15 - 4; *:4 R15 = R2; }
STM0_2: R2                   is type_d_5=1 & type_d_0_4=0 & R2 { R15 = R15 - 4; *:4 R15 = R2; }
STM0_1: STM0_2               is type_d_6=0 & STM0_2            { }
STM0_1: R1, STM0_2           is type_d_6=1 & R1 & STM0_2       { R15 = R15 - 4; *:4 R15 = R1; }
STM0_1: R1                   is type_d_6=1 & type_d_0_5=0 & R1 { R15 = R15 - 4; *:4 R15 = R1; }
STM0_0: STM0_1               is type_d_7=0 & STM0_1            { }
STM0_0: R0, STM0_1           is type_d_7=1 & R0 & STM0_1       { R15 = R15 - 4; *:4 R15 = R0; }
STM0_0: R0                   is type_d_7=1 & type_d_0_6=0 & R0 { R15 = R15 - 4; *:4 R15 = R0; }
STM0_list_dec: "("STM0_0")"  is STM0_0                         { }


:STM0 STM0_list_dec
is type_d_OP=0b10001110 & STM0_list_dec
{
    build STM0_list_dec;
}

STM1_7:                       is type_d_0=0                      { }
STM1_7: R15                   is type_d_0=1 & R15                { R15 = R15 - 4; *:4 R15 = R15; }
STM1_6: STM1_7                is type_d_1=0 & STM1_7             { }
STM1_6: R14, STM1_7           is type_d_1=1 & R14 & STM1_7       { R15 = R15 - 4; *:4 R15 = R14; }
STM1_6: R14                   is type_d_1=1 & type_d_0=0 & R14   { R15 = R15 - 4; *:4 R15 = R14; }
STM1_5: STM1_6                is type_d_2=0 & STM1_6             { }
STM1_5: R13, STM1_6           is type_d_2=1 & R13 & STM1_6       { R15 = R15 - 4; *:4 R15 = R13; }
STM1_5: R13                   is type_d_2=1 & type_d_0_1=0 & R13 { R15 = R15 - 4; *:4 R15 = R13; }
STM1_4: STM1_5                is type_d_3=0 & STM1_5             { }
STM1_4: R12, STM1_5           is type_d_3=1 & R12 & STM1_5       { R15 = R15 - 4; *:4 R15 = R12; }
STM1_4: R12                   is type_d_3=1 & type_d_0_2=0 & R12 { R15 = R15 - 4; *:4 R15 = R12; }
STM1_3: STM1_4                is type_d_4=0 & STM1_4             { }
STM1_3: R11, STM1_4           is type_d_4=1 & R11 & STM1_4       { R15 = R15 - 4; *:4 R15 = R11; }
STM1_3: R11                   is type_d_4=1 & type_d_0_3=0 & R11 { R15 = R15 - 4; *:4 R15 = R11; }
STM1_2: STM1_3                is type_d_5=0 & STM1_3             { }
STM1_2: R10, STM1_3           is type_d_5=1 & R10 & STM1_3       { R15 = R15 - 4; *:4 R15 = R10; }
STM1_2: R10                   is type_d_5=1 & type_d_0_4=0 & R10 { R15 = R15 - 4; *:4 R15 = R10; }
STM1_1: STM1_2                is type_d_6=0 & STM1_2             { }
STM1_1: R9, STM1_2            is type_d_6=1 & R9 & STM1_2        { R15 = R15 - 4; *:4 R15 = R9; }
STM1_1: R9                    is type_d_6=1 & type_d_0_5=0 & R9  { R15 = R15 - 4; *:4 R15 = R9; }
STM1_0: STM1_1                is type_d_7=0 & STM1_1             { }
STM1_0: R8, STM1_1            is type_d_7=1 & R8 & STM1_1        { R15 = R15 - 4; *:4 R15 = R8; }
STM1_0: R8                    is type_d_7=1 & type_d_0_6=0 & R8  { R15 = R15 - 4; *:4 R15 = R8; }
STM1_list_dec: "("STM1_0")"   is STM1_0                          { }

:STM1 STM1_list_dec
is type_d_OP=0b10001111 & STM1_list_dec
{
    build STM1_list_dec;
}

:ENTER #stack_space
is type_d_OP=0b00001111 & type_d_u8 [ stack_space = 4 * type_d_u8; ]
{
    *:4 (R15 - 4) = R14;
    R14 = R15 - 4;
    R15 = R15 - stack_space;
}

:LEAVE
is opcode_00_15=0b1001111110010000
{
    R15 = R14 + 4;
    R14 = *:4 (R15 - 4);
}

:XCHB @type_a_Rj, type_a_Ri
is type_a_OP=0b10001010 & type_a_Rj & type_a_Ri
{
    local temp = type_a_Ri;
    type_a_Ri = *:1 type_a_Rj;
    type_a_Rj = temp;
}
