import unittest
import subprocess
from pathlib import Path


TEST_DIRECTORY = Path(__file__).resolve().parent
TEST_HARNESS = TEST_DIRECTORY / 'bin' / 'test_harness'


def disassemble(bytecode):
    return subprocess.check_output([TEST_HARNESS], input=bytecode)


class DisassemblyTest(unittest.TestCase):
    SINGLE_OPCODE_CASES = [
        (b'\x9F\xA0', 'NOP'),
        (b'\xA6\x39', 'ADD R3, R9'),
        (b'\xA4\x52', 'ADD #0x5, R2'),
        (b'\xA5\xF4', 'ADD2 #-0x1, R4'),
        (b'\xA5\x04', 'ADD2 #-0x10, R4'),
        (b'\xA7\x0F', 'ADDC R0, R15'),
        (b'\xA2\x69', 'ADDN R6, R9'),
        (b'\xA0\xF2', 'ADDN #0xf, R2'),
        (b'\xA1\x53', 'ADDN2 #-0xb, R3'),
        (b'\xA1\x13', 'ADDN2 #-0xf, R3'),
        (b'\xAC\x85', 'SUB R8, R5'),
        (b'\xAD\xC7', 'SUBC R12, R7'),
        (b'\xAE\xED', 'SUBN R14, R13'),
        (b'\xAA\x12', 'CMP R1, R2'),
        (b'\xA8\x33', 'CMP #0x3, R3'),
        (b'\xA9\xD3', 'CMP2 #-0x3, R3'),
        (b'\xA9\x43', 'CMP2 #-0xc, R3'),
        (b'\x82\x23', 'AND R2, R3'),
        (b'\x84\x34', 'AND R3, @R4'),
        (b'\x85\x45', 'ANDH R4, @R5'),
        (b'\x86\x56', 'ANDB R5, @R6'),
        (b'\x92\x78', 'OR R7, R8'),
        (b'\x94\x89', 'OR R8, @R9'),
        (b'\x95\x9A', 'ORH R9, @R10'),
        (b'\x96\xAB', 'ORB R10, @R11'),
        (b'\x9A\xBC', 'EOR R11, R12'),
        (b'\x9C\xCD', 'EOR R12, @R13'),
        (b'\x9D\xDE', 'EORH R13, @R14'),
        (b'\x9E\xEF', 'EORB R14, @R15'),
        (b'\x80\xF0', 'BANDL #0xf, R0'),
        (b'\x81\x01', 'BANDH #0x0, R1'),
        (b'\x90\x12', 'BORL #0x1, R2'),
        (b'\x91\x23', 'BORH #0x2, R3'),
        (b'\x98\x34', 'BEORL #0x3, R4'),
        (b'\x99\x45', 'BEORH #0x4, R5'),
        (b'\x88\x56', 'BTSTL #0x5, R6'),
        (b'\x89\x67', 'BTSTH #0x6, R7'),
        (b'\xAF\x78', 'MUL R7, R8'),
        (b'\xAB\x89', 'MULU R8, R9'),
        (b'\xBF\x9A', 'MULH R9, R10'),
        (b'\xBB\xAB', 'MULUH R10, R11'),
        (b'\x97\x4C', 'DIV0S R12'),
        (b'\x97\x5D', 'DIV0U R13'),
        (b'\x97\x6E', 'DIV1 R14'),
        (b'\x97\x7F', 'DIV2 R15'),
        (b'\x9F\x60', 'DIV3'),
        (b'\x9F\x70', 'DIV4S'),
        (b'\xB6\xA0', 'LSL R10, R0'),
        (b'\xB4\xB1', 'LSL #0xb, R1'),
        (b'\xB5\xC2', 'LSL2 #0xc, R2'),
        (b'\xB2\xD3', 'LSR R13, R3'),
        (b'\xB0\xE4', 'LSR #0xe, R4'),
        (b'\xB1\xF5', 'LSR2 #0xf, R5'),
        (b'\xBA\x06', 'ASR R0, R6'),
        (b'\xB8\x17', 'ASR #0x1, R7'),
        (b'\xB9\x28', 'ASR2 #0x2, R8'),
        (b'\x9F\x83\xDE\xAD\xBE\xEF', 'LDI:32 #0xdeadbeef, R3'),
        (b'\x9B\xCA\xAF\xEB', 'LDI:20 #0xcafeb, R10'),
        (b'\xCC\xAF', 'LDI:8 #0xca, R15'),
        (b'\x04\x18', 'LD @R1, R8'),
        (b'\x00\x29', 'LD @(R13 + R2), R9'),
        (b'\x28\x23', 'LD @(R14 + 4 * -0x7e), R3'),
        (b'\x03\xF4', 'LD @(R15 + 4 * 0xf), R4'),
        (b'\x07\x05', 'LD @R15+, R5'),
        (b'\x07\x83', 'LD @R15+, USP'),
        (b'\x07\x90', 'LD @R15+, PS'),
        (b'\x05\x46', 'LDUH @R4, R6'),
        (b'\x01\x57', 'LDUH @(R13 + R5), R7'),
        (b'\x4F\xD6', 'LDUH @(R14 + 2 * -0x3), R6'),
        (b'\x06\x68', 'LDUB @R6, R8'),
        (b'\x02\x79', 'LDUB @(R13 + R7), R9'),
        (b'\x6F\xD6', 'LDUB @(R14 + -0x3), R6'),
        (b'\x14\x8A', 'ST R10, @R8'),
        (b'\x10\x9B', 'ST R11, @(R13 + R9)'),
        (b'\x3F\x97', 'ST R7, @(R14 + 4 * -0x7)'),
        (b'\x13\xBC', 'ST R12, @(R15 + 4 * 0xb)'),
        (b'\x17\x03', 'ST R3, @-R15'),
        (b'\x17\x83', 'ST USP, @-R15'),
        (b'\x17\x90', 'ST PS, @-R15'),
        (b'\x15\xCD', 'STH R13, @R12'),
        (b'\x11\xDE', 'STH R14, @(R13 + R13)'),
        (b'\x5F\xE7', 'STH R7, @(R14 + 2 * -0x2)'),
        (b'\x16\xCD', 'STB R13, @R12'),
        (b'\x12\xDE', 'STB R14, @(R13 + R13)'),
        (b'\x71\x07', 'STB R7, @(R14 + 0x10)'),
        (b'\x8B\xEF', 'MOV R14, R15'),
        (b'\xB7\x20', 'MOV SSP, R0'),
        (b'\x17\x11', 'MOV PS, R1'),
        (b'\xB3\x31', 'MOV R1, USP'),
        (b'\x07\x18', 'MOV R8, PS'),
        (b'\x97\x0B', 'JMP @R11'),
        (b'\xD0\x04', 'CALL 0xa'),
        (b'\x97\x1B', 'CALL @R11'),
        (b'\x97\x20', 'RET'),
        (b'\x1F\x31', 'INT #0x31'),
        (b'\x9F\x30', 'INTE'),
        (b'\x97\x30', 'RETI'),
        (b'\xE0\x01', 'BRA 0x4'),
        (b'\xE1\x01', 'BNO 0x4'),
        (b'\xE2\x01', 'BEQ 0x4'),
        (b'\xE3\x01', 'BNE 0x4'),
        (b'\xE4\x01', 'BC 0x4'),
        (b'\xE5\x01', 'BNC 0x4'),
        (b'\xE6\x01', 'BN 0x4'),
        (b'\xE7\x01', 'BP 0x4'),
        (b'\xE8\x01', 'BV 0x4'),
        (b'\xE9\x01', 'BNV 0x4'),
        (b'\xEA\x01', 'BLT 0x4'),
        (b'\xEB\x01', 'BGE 0x4'),
        (b'\xEC\x01', 'BLE 0x4'),
        (b'\xED\x01', 'BGT 0x4'),
        (b'\xEE\x01', 'BLS 0x4'),
        (b'\xEF\x01', 'BHI 0x4'),
        (b'\x9F\x0B', 'JMP:D @R11'),
        (b'\xD8\x04', 'CALL:D 0xa'),
        (b'\x9F\x1B', 'CALL:D @R11'),
        (b'\x9F\x20', 'RET:D'),
        (b'\xF0\x01', 'BRA:D 0x4'),
        (b'\xF1\x01', 'BNO:D 0x4'),
        (b'\xF2\x01', 'BEQ:D 0x4'),
        (b'\xF3\x01', 'BNE:D 0x4'),
        (b'\xF4\x01', 'BC:D 0x4'),
        (b'\xF5\x01', 'BNC:D 0x4'),
        (b'\xF6\x01', 'BN:D 0x4'),
        (b'\xF7\x01', 'BP:D 0x4'),
        (b'\xF8\x01', 'BV:D 0x4'),
        (b'\xF9\x01', 'BNV:D 0x4'),
        (b'\xFA\x01', 'BLT:D 0x4'),
        (b'\xFB\x01', 'BGE:D 0x4'),
        (b'\xFC\x01', 'BLE:D 0x4'),
        (b'\xFD\x01', 'BGT:D 0x4'),
        (b'\xFE\x01', 'BLS:D 0x4'),
        (b'\xFF\x01', 'BHI:D 0x4'),
        (b'\x08\x02', 'DMOV @0x8, R13'),
        (b'\x18\x02', 'DMOV R13, @0x8'),
        (b'\x0C\x02', 'DMOV @0x8, @R13+'),
        (b'\x1C\x02', 'DMOV @R13+, @0x8'),
        (b'\x0B\x02', 'DMOV @0x8, @-R15'),
        (b'\x1B\x02', 'DMOV @R15+, @0x8'),
        (b'\x09\x02', 'DMOVH @0x4, R13'),
        (b'\x19\x02', 'DMOVH R13, @0x4'),
        (b'\x0D\x02', 'DMOVH @0x4, @R13+'),
        (b'\x1D\x02', 'DMOVH @R13+, @0x4'),
        (b'\x0A\x02', 'DMOVB @0x2, R13'),
        (b'\x1A\x02', 'DMOVB R13, @0x2'),
        (b'\x0E\x02', 'DMOVB @0x2, @R13+'),
        (b'\x1E\x02', 'DMOVB @R13+, @0x2'),
        (b'\xBC\x31', 'LDRES @R1+, #0x3'),
        (b'\xBD\x31', 'STRES #0x3, @R1+'),
        (b'\x9F\xCF\x02\x11', 'COPOP #R15, #0x4, 0x1, 0x1'),
        (b'\x9F\xDF\x02\x11', 'COPLD #R15, #0x4, R1, 0x1'),
        (b'\x9F\xEF\x02\x11', 'COPST #R15, #0x4, 0x1, R1'),
        (b'\x9F\xFF\x02\x11', 'COPSV #R15, #0x4, 0x1, R1'),
        (b'\x83\xFE', 'ANDCCR #0xfe'),
        (b'\x93\x10', 'ORCCR #0x10'),
        (b'\x87\x10', 'STILM #0x10'),
        (b'\xA3\xFD', 'ADDSP #-0x3'),
        (b'\x97\x80', 'EXTSB R0'),
        (b'\x97\x91', 'EXTUB R1'),
        (b'\x97\xA2', 'EXTSH R2'),
        (b'\x97\xB3', 'EXTUH R3'),
        (b'\x8C\xFF', 'LDM0 (R0, R1, R2, R3, R4, R5, R6, R7)'),
        (b'\x8C\x91', 'LDM0 (R0, R4, R7)'),
        (b'\x8D\xFF', 'LDM1 (R8, R9, R10, R11, R12, R13, R14, R15)'),
        (b'\x8D\x91', 'LDM1 (R8, R12, R15)'),
        (b'\x8E\xFF', 'STM0 (R7, R6, R5, R4, R3, R2, R1, R0)'),
        (b'\x8E\x91', 'STM0 (R7, R3, R0)'),
        (b'\x8F\xFF', 'STM1 (R15, R14, R13, R12, R11, R10, R9, R8)'),
        (b'\x8F\x91', 'STM1 (R15, R11, R8)'),
        (b'\x0F\x10', 'ENTER #0x40'),
        (b'\x9F\x90', 'LEAVE'),
        (b'\x8A\x35', 'XCHB @R3, R5'),
    ]

    def test_single_opcodes(self):
        for i, (bytecode, disassembly) in enumerate(self.SINGLE_OPCODE_CASES):
            with self.subTest(msg=disassembly):
                actual_disassembly = disassemble(bytecode)
                self.assertIn(disassembly.encode(), actual_disassembly)


if __name__ == '__main__':
    unittest.main()
